// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskManager.Models.taskToDo;

namespace TaskManager.Migrations
{
    [DbContext(typeof(TaskToDoContext))]
    [Migration("20220314180932_InitalMigration")]
    partial class InitalMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TaskManager.Models.Comment", b =>
                {
                    b.Property<Guid>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TaskToDoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WorkItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CommentId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TaskToDoId");

                    b.HasIndex("WorkItemId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("TaskManager.Models.TaskToDo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("WorkItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("WorkItemId");

                    b.ToTable("TaskToDos");
                });

            modelBuilder.Entity("TaskManager.Models.employee.Employee", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeAge")
                        .HasColumnType("int");

                    b.Property<Guid?>("EmployeeId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("EmployeeId1");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("TaskManager.Models.tag.Tag", b =>
                {
                    b.Property<Guid>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("TaskToDoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WorkItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TagId");

                    b.HasIndex("TaskToDoId");

                    b.HasIndex("WorkItemId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("TaskManager.Models.workItem.WorkItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("WorkItems");
                });

            modelBuilder.Entity("TaskManager.Models.Comment", b =>
                {
                    b.HasOne("TaskManager.Models.employee.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManager.Models.TaskToDo", "TaskToDo")
                        .WithMany("Comments")
                        .HasForeignKey("TaskToDoId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("TaskManager.Models.workItem.WorkItem", "WorkItem")
                        .WithMany("Comments")
                        .HasForeignKey("WorkItemId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("Employee");

                    b.Navigation("TaskToDo");

                    b.Navigation("WorkItem");
                });

            modelBuilder.Entity("TaskManager.Models.TaskToDo", b =>
                {
                    b.HasOne("TaskManager.Models.employee.Employee", "Employee")
                        .WithMany("TasksToDo")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("TaskManager.Models.workItem.WorkItem", "WorkItem")
                        .WithMany("TaskToDos")
                        .HasForeignKey("WorkItemId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("WorkItem");
                });

            modelBuilder.Entity("TaskManager.Models.employee.Employee", b =>
                {
                    b.HasOne("TaskManager.Models.employee.Employee", null)
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeId1");
                });

            modelBuilder.Entity("TaskManager.Models.tag.Tag", b =>
                {
                    b.HasOne("TaskManager.Models.TaskToDo", "TaskToDo")
                        .WithMany("Tags")
                        .HasForeignKey("TaskToDoId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("TaskManager.Models.workItem.WorkItem", "WorkItem")
                        .WithMany("Tags")
                        .HasForeignKey("WorkItemId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("TaskToDo");

                    b.Navigation("WorkItem");
                });

            modelBuilder.Entity("TaskManager.Models.workItem.WorkItem", b =>
                {
                    b.HasOne("TaskManager.Models.employee.Employee", "Employee")
                        .WithMany("WorkItems")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("TaskManager.Models.TaskToDo", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("TaskManager.Models.employee.Employee", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("TasksToDo");

                    b.Navigation("WorkItems");
                });

            modelBuilder.Entity("TaskManager.Models.workItem.WorkItem", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Tags");

                    b.Navigation("TaskToDos");
                });
#pragma warning restore 612, 618
        }
    }
}
